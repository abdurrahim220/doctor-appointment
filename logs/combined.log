2025-09-12 09:18:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:18:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:18:59 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:18:59 [[32minfo[39m]: Redis connected
2025-09-12 09:18:59 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:18:59 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:19:28 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:19:28 [[32minfo[39m]: Redis connected
2025-09-12 09:19:28 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:19:28 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:19:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:19:34 [[32minfo[39m]: Redis connected
2025-09-12 09:19:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:19:34 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:19:37 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:19:37 [[32minfo[39m]: Redis connected
2025-09-12 09:19:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:19:37 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:19:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:19:41 [[32minfo[39m]: Redis connected
2025-09-12 09:19:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:19:41 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:20:04 [[32minfo[39m]: Redis connected
2025-09-12 09:20:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:20:04 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:20:08 [[32minfo[39m]: Redis connected
2025-09-12 09:20:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:20:08 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:20:15 [[32minfo[39m]: Redis connected
2025-09-12 09:20:15 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:20:15 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:19 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:20:20 [[32minfo[39m]: Redis connected
2025-09-12 09:20:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:20:20 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:23 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:22:33
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:20:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:20:41 [[32minfo[39m]: Redis connected
2025-09-12 09:20:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:20:41 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:20:43 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:22:33
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:21:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 09:21:00 [[32minfo[39m]: Redis connected
2025-09-12 09:21:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 09:21:00 [[32minfo[39m]: Server is running on port 5000
2025-09-12 09:21:02 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:21:02 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at param (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:600:14)
2025-09-12 18:16:28 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:16:28 [[32minfo[39m]: Redis connected
2025-09-12 18:16:28 [[32minfo[39m]: Bloom filter created: users_bloom
2025-09-12 18:16:28 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:18:13 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:18:13 [[32minfo[39m]: Redis connected
2025-09-12 18:18:13 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:18:13 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:18:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:18:50 [[32minfo[39m]: Redis connected
2025-09-12 18:18:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:18:50 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:21:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:21:49 [[32minfo[39m]: Redis connected
2025-09-12 18:21:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:21:49 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:07 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:07 [[32minfo[39m]: Redis connected
2025-09-12 18:22:07 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:07 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:15 [[32minfo[39m]: Redis connected
2025-09-12 18:22:15 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:15 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:37 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:37 [[32minfo[39m]: Redis connected
2025-09-12 18:22:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:37 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:43 [[32minfo[39m]: Redis connected
2025-09-12 18:22:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:43 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:48 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:48 [[32minfo[39m]: Redis connected
2025-09-12 18:22:48 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:48 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:22:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:22:56 [[32minfo[39m]: Redis connected
2025-09-12 18:22:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:22:56 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:36:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:36:40 [[32minfo[39m]: Redis connected
2025-09-12 18:36:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:36:40 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:36:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:36:44 [[32minfo[39m]: Redis connected
2025-09-12 18:36:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:36:44 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:37:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:37:33 [[32minfo[39m]: Redis connected
2025-09-12 18:37:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:37:33 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:37:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:37:38 [[32minfo[39m]: Redis connected
2025-09-12 18:37:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:37:38 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:37:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:37:43 [[32minfo[39m]: Redis connected
2025-09-12 18:37:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:37:43 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:37:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:37:46 [[32minfo[39m]: Redis connected
2025-09-12 18:37:46 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:37:46 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:37:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:37:55 [[32minfo[39m]: Redis connected
2025-09-12 18:37:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:37:55 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:47:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:47:04 [[32minfo[39m]: Redis connected
2025-09-12 18:47:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:47:04 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:47:10 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:47:10 [[32minfo[39m]: Redis connected
2025-09-12 18:47:10 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:47:10 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:50:21 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:50:21 [[32minfo[39m]: Redis connected
2025-09-12 18:50:21 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:50:21 [[32minfo[39m]: Server is running on port 5000
2025-09-12 18:54:05 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 18:54:05 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at processParams (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:582:12)
2025-09-12 18:57:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 18:57:46 [[32minfo[39m]: Redis connected
2025-09-12 18:57:46 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 18:57:46 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:04:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:04:39 [[32minfo[39m]: Redis connected
2025-09-12 19:04:39 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:04:39 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:04:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:04:46 [[32minfo[39m]: Redis connected
2025-09-12 19:04:46 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:04:46 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:05:03 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:05:03 [[32minfo[39m]: Redis connected
2025-09-12 19:05:03 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:05:03 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:08:27 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:08:27 [[32minfo[39m]: Redis connected
2025-09-12 19:08:27 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:08:27 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:09:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:09:00 [[32minfo[39m]: Redis connected
2025-09-12 19:09:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:09:00 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:09:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:09:05 [[32minfo[39m]: Redis connected
2025-09-12 19:09:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:09:05 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:09:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:09:08 [[32minfo[39m]: Redis connected
2025-09-12 19:09:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:09:08 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:10:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:10:05 [[32minfo[39m]: Redis connected
2025-09-12 19:10:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:10:05 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:11:54 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:11:58 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:13:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:13:20 [[32minfo[39m]: Redis connected
2025-09-12 19:13:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:13:20 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:13:23 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:14:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:14:20 [[32minfo[39m]: Redis connected
2025-09-12 19:14:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:14:20 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:16:14 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:16:14 [[32minfo[39m]: Redis connected
2025-09-12 19:16:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:16:14 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:16:15 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:20:38 [[32minfo[39m]: Redis connected
2025-09-12 19:20:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:20:38 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:20:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:20:41 [[32minfo[39m]: Redis connected
2025-09-12 19:20:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:20:41 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:20:43 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:48 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:21:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:21:08 [[32minfo[39m]: Redis connected
2025-09-12 19:21:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:21:08 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:21:15 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:21:59 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:22:34 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:22:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:22:36 [[32minfo[39m]: Redis connected
2025-09-12 19:22:36 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:22:36 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:22:38 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:22:40 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:01 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:23:01 [[32minfo[39m]: Redis connected
2025-09-12 19:23:01 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:23:01 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:23:07 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:23:07 [[32minfo[39m]: Redis connected
2025-09-12 19:23:07 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:23:07 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:23:11 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:12 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:23:38 [[32minfo[39m]: Redis connected
2025-09-12 19:23:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:23:38 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:23:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:23:41 [[32minfo[39m]: Redis connected
2025-09-12 19:23:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:23:41 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:23:42 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:23:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:23:56 [[32minfo[39m]: Redis connected
2025-09-12 19:23:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:23:56 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:23:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:23:59 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:24:16 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:24:16 [[32minfo[39m]: Redis connected
2025-09-12 19:24:16 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:24:16 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:24:17 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:25:14 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:25:14 [[32minfo[39m]: Redis connected
2025-09-12 19:25:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:25:14 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:25:20 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:25:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:25:44 [[32minfo[39m]: Redis connected
2025-09-12 19:25:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:25:44 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:25:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:25:49 [[32minfo[39m]: Redis connected
2025-09-12 19:25:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:25:49 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:25:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:25:53 [[32minfo[39m]: Redis connected
2025-09-12 19:25:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:25:53 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:25:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:25:58 [[32minfo[39m]: Redis connected
2025-09-12 19:25:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:25:58 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:26:02 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
â†’ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:38:18
2025-09-12 19:26:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:26:17 [[32minfo[39m]: Redis connected
2025-09-12 19:26:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:26:17 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:26:39 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:26:39 [[32minfo[39m]: Redis connected
2025-09-12 19:26:39 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:26:39 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:26 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:26 [[32minfo[39m]: Redis connected
2025-09-12 19:27:26 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:26 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:32 [[32minfo[39m]: Redis connected
2025-09-12 19:27:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:32 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:37 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:37 [[32minfo[39m]: Redis connected
2025-09-12 19:27:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:37 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:45 [[32minfo[39m]: Redis connected
2025-09-12 19:27:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:45 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:47 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:47 [[32minfo[39m]: Redis connected
2025-09-12 19:27:47 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:47 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:55 [[32minfo[39m]: Redis connected
2025-09-12 19:27:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:55 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:27:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:27:58 [[32minfo[39m]: Redis connected
2025-09-12 19:27:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:27:58 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:28:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:28:02 [[32minfo[39m]: Redis connected
2025-09-12 19:28:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:28:02 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:41:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:41:55 [[32minfo[39m]: Redis connected
2025-09-12 19:41:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:41:55 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:42:03 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:42:03 [[32minfo[39m]: Redis connected
2025-09-12 19:42:03 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:42:03 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:42:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:42:09 [[32minfo[39m]: Redis connected
2025-09-12 19:42:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:42:09 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:42:13 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:42:13 [[32minfo[39m]: Redis connected
2025-09-12 19:42:13 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:42:13 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:50:22 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:50:22 [[32minfo[39m]: Redis connected
2025-09-12 19:50:22 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:50:22 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:50:28 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:50:28 [[32minfo[39m]: Redis connected
2025-09-12 19:50:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:50:29 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:50:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:50:33 [[32minfo[39m]: Redis connected
2025-09-12 19:50:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:50:33 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:50:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:50:53 [[32minfo[39m]: Redis connected
2025-09-12 19:50:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:50:53 [[32minfo[39m]: Server is running on port 5000
2025-09-12 19:53:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-12 19:53:02 [[32minfo[39m]: Redis connected
2025-09-12 19:53:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-12 19:53:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:07:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:07:02 [[32minfo[39m]: Redis connected
2025-09-13 11:07:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:07:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:07:06 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:07:06 [[32minfo[39m]: Redis connected
2025-09-13 11:07:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:07:06 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:26:35 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:26:35 [[32minfo[39m]: Redis connected
2025-09-13 11:26:35 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:26:35 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:26:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:26:55 [[32minfo[39m]: Redis connected
2025-09-13 11:26:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:26:55 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:27:10 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:27:11 [[32minfo[39m]: Redis connected
2025-09-13 11:27:11 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:27:11 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:27:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:27:15 [[32minfo[39m]: Redis connected
2025-09-13 11:27:15 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:27:15 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:27:21 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:27:21 [[32minfo[39m]: Redis connected
2025-09-13 11:27:21 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:27:21 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:27:24 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:27:25 [[32minfo[39m]: Redis connected
2025-09-13 11:27:25 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:27:25 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:27:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:27:46 [[32minfo[39m]: Redis connected
2025-09-13 11:27:46 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:27:46 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:31:03 [[31merror[39m]: Error: password not matched
    at Object.login (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\auth\auth.services.ts:24:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\auth\auth.controller.ts:10:18
2025-09-13 11:37:36 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.create()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:19:45

  16 }
  17 
  18 
â†’ 19 const result = await prisma.doctorProfile.create({
       data: {
         specialty: "SURGERY",
         licenseNumber: "S10567",
     +   status: ProfileStatus
       }
     })

Argument `status` is missing.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:19:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-13 11:37:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:37:57 [[32minfo[39m]: Redis connected
2025-09-13 11:37:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:37:57 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:05 [[32minfo[39m]: Redis connected
2025-09-13 11:38:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:09 [[32minfo[39m]: Redis connected
2025-09-13 11:38:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:09 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:12 [[32minfo[39m]: Redis connected
2025-09-13 11:38:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:18 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:18 [[32minfo[39m]: Redis connected
2025-09-13 11:38:18 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:18 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:50 [[32minfo[39m]: Redis connected
2025-09-13 11:38:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:50 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:38:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:38:53 [[32minfo[39m]: Redis connected
2025-09-13 11:38:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:38:53 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:39:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:39:51 [[32minfo[39m]: Redis connected
2025-09-13 11:39:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:39:51 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:39:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:39:56 [[32minfo[39m]: Redis connected
2025-09-13 11:39:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:39:56 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:00 [[32minfo[39m]: Redis connected
2025-09-13 11:40:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:00 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:05 [[32minfo[39m]: Redis connected
2025-09-13 11:40:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:23 [[32minfo[39m]: Redis connected
2025-09-13 11:40:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:23 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:27 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:27 [[32minfo[39m]: Redis connected
2025-09-13 11:40:27 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:27 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:29 [[32minfo[39m]: Redis connected
2025-09-13 11:40:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:29 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:34 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:34 [[32minfo[39m]: Redis connected
2025-09-13 11:40:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:34 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:37 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:37 [[32minfo[39m]: Redis connected
2025-09-13 11:40:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:37 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:40:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:40:51 [[32minfo[39m]: Redis connected
2025-09-13 11:40:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:40:51 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:43:48 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:43:48 [[32minfo[39m]: Redis connected
2025-09-13 11:43:48 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:43:48 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:44:47 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:44:47 [[32minfo[39m]: Redis connected
2025-09-13 11:44:47 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:44:47 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:44:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:44:50 [[32minfo[39m]: Redis connected
2025-09-13 11:44:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:44:50 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:44:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:44:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:44:57 [[32minfo[39m]: Redis connected
2025-09-13 11:44:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:44:57 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:02 [[32minfo[39m]: Redis connected
2025-09-13 11:48:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:19 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:19 [[32minfo[39m]: Redis connected
2025-09-13 11:48:19 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:19 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:24 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:24 [[32minfo[39m]: Redis connected
2025-09-13 11:48:24 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:24 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:27 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:27 [[32minfo[39m]: Redis connected
2025-09-13 11:48:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:29 [[32minfo[39m]: Redis connected
2025-09-13 11:48:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:29 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:33 [[32minfo[39m]: Redis connected
2025-09-13 11:48:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:33 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:48:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:48:39 [[32minfo[39m]: Redis connected
2025-09-13 11:48:39 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:48:39 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:04 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.findUnique()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:32:45

  29 };
  30 
  31 const getDoctorProfile = async (userId: string) => {
â†’ 32   const result = await prisma.doctorProfile.findUnique({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         include: {
           user: {
             select: {
               id: true,
               email: true,
               name: true,
               phone: true,
               role: true,
               status: true,
               ~~~~~~
               dateOfBirth: true,
       ?       gender?: true,
       ?       password?: true,
       ?       isActive?: true,
       ?       isDeleted?: true,
       ?       createdAt?: true,
       ?       updatedAt?: true,
       ?       posts?: true,
       ?       patientProfile?: true,
       ?       doctorProfile?: true,
       ?       nurseProfile?: true,
       ?       _count?: true
             }
           },
           schedules: true,
           appointments: true,
           clinics: true
         }
       })

Unknown field `status` for select statement on model `User`. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.getDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:32:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:23:18
2025-09-13 11:49:21 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:21 [[32minfo[39m]: Redis connected
2025-09-13 11:49:21 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:21 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:25 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:25 [[32minfo[39m]: Redis connected
2025-09-13 11:49:25 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:25 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:41 [[32minfo[39m]: Redis connected
2025-09-13 11:49:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:41 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:44 [[32minfo[39m]: Redis connected
2025-09-13 11:49:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:44 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:49 [[32minfo[39m]: Redis connected
2025-09-13 11:49:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:49 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:49:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:49:56 [[32minfo[39m]: Redis connected
2025-09-13 11:49:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:49:56 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:50:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:50:05 [[32minfo[39m]: Redis connected
2025-09-13 11:50:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:50:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:50:22 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:50:22 [[32minfo[39m]: Redis connected
2025-09-13 11:50:22 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:50:22 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:50:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:50:32 [[32minfo[39m]: Redis connected
2025-09-13 11:50:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:50:32 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:52:10 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:52:10 [[32minfo[39m]: Redis connected
2025-09-13 11:52:10 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:52:10 [[32minfo[39m]: Server is running on port 5000
2025-09-13 11:52:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 11:52:17 [[32minfo[39m]: Redis connected
2025-09-13 11:52:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 11:52:17 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:13 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:00:13 [[32minfo[39m]: Redis connected
2025-09-13 12:00:13 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:00:13 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:00:16 [[32minfo[39m]: Redis connected
2025-09-13 12:00:16 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:00:16 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:22 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:00:22 [[32minfo[39m]: Redis connected
2025-09-13 12:00:22 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:00:22 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:00:38 [[32minfo[39m]: Redis connected
2025-09-13 12:00:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:00:38 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:00:44 [[32minfo[39m]: Redis connected
2025-09-13 12:00:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:00:44 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:00:54 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIV"
                   ~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:01:11 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:01:35 [[31merror[39m]: ZodError: [
  {
    "expected": "object",
    "code": "invalid_type",
    "path": [],
    "message": "Invalid input: expected object, received undefined"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:01:45 [[31merror[39m]: Error: Doctor profile already exists
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:17:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-13 12:01:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:03:36 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:04:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:04:29 [[32minfo[39m]: Redis connected
2025-09-13 12:04:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:04:29 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:05:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:05:17 [[32minfo[39m]: Redis connected
2025-09-13 12:05:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:05:17 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:05:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:05:42 [[32minfo[39m]: Redis connected
2025-09-13 12:05:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:05:42 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:05:49 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:06:05 [[32minfo[39m]: Redis connected
2025-09-13 12:06:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:06:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:06:09 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:10 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
â†’ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:21 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:06:21 [[32minfo[39m]: Redis connected
2025-09-13 12:06:21 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:06:21 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:06:23 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:08:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:08:12 [[32minfo[39m]: Redis connected
2025-09-13 12:08:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:08:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:08:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:08:33 [[32minfo[39m]: Redis connected
2025-09-13 12:08:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:08:33 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:09:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 12:09:00 [[32minfo[39m]: Redis connected
2025-09-13 12:09:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 12:09:00 [[32minfo[39m]: Server is running on port 5000
2025-09-13 12:09:03 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:05 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:11 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:19 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 16:18:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:18:36 [[32minfo[39m]: Redis connected
2025-09-13 16:18:36 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:18:36 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:21:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:21:23 [[32minfo[39m]: Redis connected
2025-09-13 16:21:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:21:24 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:21:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:21:47 [[32minfo[39m]: Redis connected
2025-09-13 16:21:47 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:21:47 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:21:52 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:21:52 [[32minfo[39m]: Redis connected
2025-09-13 16:21:52 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:21:52 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:21:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:21:57 [[32minfo[39m]: Redis connected
2025-09-13 16:21:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:21:57 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:22:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:22:51 [[32minfo[39m]: Redis connected
2025-09-13 16:22:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:22:51 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:26 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:26 [[32minfo[39m]: Redis connected
2025-09-13 16:23:26 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:26 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:30 [[32minfo[39m]: Redis connected
2025-09-13 16:23:30 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:30 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:33 [[32minfo[39m]: Redis connected
2025-09-13 16:23:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:33 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:42 [[32minfo[39m]: Redis connected
2025-09-13 16:23:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:42 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:45 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:45 [[32minfo[39m]: Redis connected
2025-09-13 16:23:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:45 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:23:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:23:49 [[32minfo[39m]: Redis connected
2025-09-13 16:23:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:23:49 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:15 [[32minfo[39m]: Redis connected
2025-09-13 16:33:15 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:15 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:20 [[32minfo[39m]: Redis connected
2025-09-13 16:33:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:20 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:25 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:25 [[32minfo[39m]: Redis connected
2025-09-13 16:33:25 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:25 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:31 [[32minfo[39m]: Redis connected
2025-09-13 16:33:31 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:31 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:45 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:45 [[32minfo[39m]: Redis connected
2025-09-13 16:33:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:45 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:33:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:33:54 [[32minfo[39m]: Redis connected
2025-09-13 16:33:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:33:54 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:34:01 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:34:01 [[32minfo[39m]: Redis connected
2025-09-13 16:34:01 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:34:01 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:34:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:34:05 [[32minfo[39m]: Redis connected
2025-09-13 16:34:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:34:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:34:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:34:38 [[32minfo[39m]: Redis connected
2025-09-13 16:34:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:34:38 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:11 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:11 [[32minfo[39m]: Redis connected
2025-09-13 16:35:11 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:11 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:17 [[32minfo[39m]: Redis connected
2025-09-13 16:35:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:17 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:26 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:26 [[32minfo[39m]: Redis connected
2025-09-13 16:35:26 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:26 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:32 [[32minfo[39m]: Redis connected
2025-09-13 16:35:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:32 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:44 [[32minfo[39m]: Redis connected
2025-09-13 16:35:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:44 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:35:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:35:50 [[32minfo[39m]: Redis connected
2025-09-13 16:35:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:35:50 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:36:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:36:12 [[32minfo[39m]: Redis connected
2025-09-13 16:36:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:36:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:36:27 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:36:27 [[32minfo[39m]: Redis connected
2025-09-13 16:36:27 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:36:27 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:36:31 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:36:31 [[32minfo[39m]: Redis connected
2025-09-13 16:36:31 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:36:31 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:36:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:36:42 [[32minfo[39m]: Redis connected
2025-09-13 16:36:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:36:42 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:36:59 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:36:59 [[32minfo[39m]: Redis connected
2025-09-13 16:36:59 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:36:59 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:37:11 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:37:11 [[32minfo[39m]: Redis connected
2025-09-13 16:37:11 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:37:11 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:37:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:37:54 [[32minfo[39m]: Redis connected
2025-09-13 16:37:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:37:54 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:00 [[32minfo[39m]: Redis connected
2025-09-13 16:38:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:00 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:04 [[32minfo[39m]: Redis connected
2025-09-13 16:38:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:04 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:12 [[32minfo[39m]: Redis connected
2025-09-13 16:38:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:17 [[32minfo[39m]: Redis connected
2025-09-13 16:38:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:17 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:24 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:24 [[32minfo[39m]: Redis connected
2025-09-13 16:38:24 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:24 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:39 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:39 [[32minfo[39m]: Redis connected
2025-09-13 16:38:39 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:39 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:38:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:38:51 [[32minfo[39m]: Redis connected
2025-09-13 16:38:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:38:51 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:39:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:39:02 [[32minfo[39m]: Redis connected
2025-09-13 16:39:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:39:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:39:18 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:39:18 [[32minfo[39m]: Redis connected
2025-09-13 16:39:18 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:39:18 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:39:31 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:39:31 [[32minfo[39m]: Redis connected
2025-09-13 16:39:31 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:39:31 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:39:34 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:39:34 [[32minfo[39m]: Redis connected
2025-09-13 16:39:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:39:34 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:39:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:39:57 [[32minfo[39m]: Redis connected
2025-09-13 16:39:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:39:57 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:05 [[32minfo[39m]: Redis connected
2025-09-13 16:40:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:09 [[32minfo[39m]: Redis connected
2025-09-13 16:40:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:09 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:14 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:14 [[32minfo[39m]: Redis connected
2025-09-13 16:40:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:14 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:19 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:19 [[32minfo[39m]: Redis connected
2025-09-13 16:40:19 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:19 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:24 [[32minfo[39m]: Redis connected
2025-09-13 16:40:24 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:24 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:36 [[32minfo[39m]: Redis connected
2025-09-13 16:40:36 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:36 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:40:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:40:53 [[32minfo[39m]: Redis connected
2025-09-13 16:40:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:40:53 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:09 [[32minfo[39m]: Redis connected
2025-09-13 16:41:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:09 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:16 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:16 [[32minfo[39m]: Redis connected
2025-09-13 16:41:16 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:16 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:28 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:29 [[32minfo[39m]: Redis connected
2025-09-13 16:41:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:29 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:34 [[32minfo[39m]: Redis connected
2025-09-13 16:41:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:34 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:45 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:45 [[32minfo[39m]: Redis connected
2025-09-13 16:41:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:45 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:41:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:41:54 [[32minfo[39m]: Redis connected
2025-09-13 16:41:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:41:54 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:10 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:10 [[32minfo[39m]: Redis connected
2025-09-13 16:43:10 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:10 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:13 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:13 [[32minfo[39m]: Redis connected
2025-09-13 16:43:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:14 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:23 [[32minfo[39m]: Redis connected
2025-09-13 16:43:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:23 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:32 [[32minfo[39m]: Redis connected
2025-09-13 16:43:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:32 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:37 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:37 [[32minfo[39m]: Redis connected
2025-09-13 16:43:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:37 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:43:48 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:43:48 [[32minfo[39m]: Redis connected
2025-09-13 16:43:48 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:43:48 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:44:01 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:44:01 [[32minfo[39m]: Redis connected
2025-09-13 16:44:01 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:44:01 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:44:06 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:44:06 [[32minfo[39m]: Redis connected
2025-09-13 16:44:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:44:06 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:44:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:44:42 [[32minfo[39m]: Redis connected
2025-09-13 16:44:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:44:42 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:44:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:44:49 [[32minfo[39m]: Redis connected
2025-09-13 16:44:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:44:49 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:45:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:45:00 [[32minfo[39m]: Redis connected
2025-09-13 16:45:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:45:00 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:45:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:45:12 [[32minfo[39m]: Redis connected
2025-09-13 16:45:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:45:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 16:47:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 16:47:58 [[32minfo[39m]: Redis connected
2025-09-13 16:47:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 16:47:58 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:14:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:14:12 [[32minfo[39m]: Redis connected
2025-09-13 17:14:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:14:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:14:15 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:14:15 [[32minfo[39m]: Redis connected
2025-09-13 17:14:15 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:14:15 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:14:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:14:44 [[32minfo[39m]: Redis connected
2025-09-13 17:14:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:14:44 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:14:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:14:56 [[32minfo[39m]: Redis connected
2025-09-13 17:14:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:14:56 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:14:59 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:14:59 [[32minfo[39m]: Redis connected
2025-09-13 17:14:59 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:14:59 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:15:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:15:41 [[32minfo[39m]: Redis connected
2025-09-13 17:15:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:15:41 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:15:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:15:44 [[32minfo[39m]: Redis connected
2025-09-13 17:15:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:15:44 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:16:18 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:16:19 [[32minfo[39m]: Redis connected
2025-09-13 17:16:19 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:16:19 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:16:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:16:30 [[32minfo[39m]: Redis connected
2025-09-13 17:16:30 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:16:30 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:16:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:16:54 [[32minfo[39m]: Redis connected
2025-09-13 17:16:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:16:54 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:09 [[32minfo[39m]: Redis connected
2025-09-13 17:18:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:09 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:14 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:14 [[32minfo[39m]: Redis connected
2025-09-13 17:18:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:14 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:22 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:22 [[32minfo[39m]: Redis connected
2025-09-13 17:18:22 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:22 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:39 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:39 [[32minfo[39m]: Redis connected
2025-09-13 17:18:39 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:39 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:42 [[32minfo[39m]: Redis connected
2025-09-13 17:18:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:42 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:45 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:45 [[32minfo[39m]: Redis connected
2025-09-13 17:18:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:45 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:18:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:18:49 [[32minfo[39m]: Redis connected
2025-09-13 17:18:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:18:49 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:05 [[32minfo[39m]: Redis connected
2025-09-13 17:19:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:06 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:17 [[32minfo[39m]: Redis connected
2025-09-13 17:19:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:17 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:21 [[32minfo[39m]: Redis connected
2025-09-13 17:19:21 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:21 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:26 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:26 [[32minfo[39m]: Redis connected
2025-09-13 17:19:26 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:26 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:40 [[32minfo[39m]: Redis connected
2025-09-13 17:19:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:40 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:49 [[32minfo[39m]: Redis connected
2025-09-13 17:19:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:49 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:19:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:19:53 [[32minfo[39m]: Redis connected
2025-09-13 17:19:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:19:53 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:02 [[32minfo[39m]: Redis connected
2025-09-13 17:20:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:05 [[32minfo[39m]: Redis connected
2025-09-13 17:20:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:05 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:23 [[32minfo[39m]: Redis connected
2025-09-13 17:20:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:23 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:29 [[32minfo[39m]: Redis connected
2025-09-13 17:20:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:29 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:32 [[32minfo[39m]: Redis connected
2025-09-13 17:20:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:32 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:20:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:20:54 [[32minfo[39m]: Redis connected
2025-09-13 17:20:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:20:54 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:21:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:21:00 [[32minfo[39m]: Redis connected
2025-09-13 17:21:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:21:00 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:21:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:21:12 [[32minfo[39m]: Redis connected
2025-09-13 17:21:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:21:12 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:21:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:21:57 [[32minfo[39m]: Redis connected
2025-09-13 17:21:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:21:57 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:22:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:22:02 [[32minfo[39m]: Redis connected
2025-09-13 17:22:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:22:02 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:22:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:22:56 [[32minfo[39m]: Redis connected
2025-09-13 17:22:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:22:56 [[32minfo[39m]: Server is running on port 5000
2025-09-13 17:22:59 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-13 17:22:59 [[32minfo[39m]: Redis connected
2025-09-13 17:22:59 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-13 17:22:59 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:01:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:01:57 [[32minfo[39m]: Redis connected
2025-09-14 09:01:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:01:57 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:07:33 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:07:33 [[32minfo[39m]: Redis connected
2025-09-14 09:07:33 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:07:33 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:16 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:16 [[32minfo[39m]: Redis connected
2025-09-14 09:08:16 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:16 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:23 [[32minfo[39m]: Redis connected
2025-09-14 09:08:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:23 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:29 [[32minfo[39m]: Redis connected
2025-09-14 09:08:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:29 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:36 [[32minfo[39m]: Redis connected
2025-09-14 09:08:36 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:36 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:43 [[32minfo[39m]: Redis connected
2025-09-14 09:08:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:43 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:08:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:08:50 [[32minfo[39m]: Redis connected
2025-09-14 09:08:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:08:50 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:06 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:06 [[32minfo[39m]: Redis connected
2025-09-14 09:09:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:06 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:11 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:11 [[32minfo[39m]: Redis connected
2025-09-14 09:09:11 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:11 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:20 [[32minfo[39m]: Redis connected
2025-09-14 09:09:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:20 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:41 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:41 [[32minfo[39m]: Redis connected
2025-09-14 09:09:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:41 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:48 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:48 [[32minfo[39m]: Redis connected
2025-09-14 09:09:48 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:48 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:52 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:52 [[32minfo[39m]: Redis connected
2025-09-14 09:09:52 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:52 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:09:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:09:57 [[32minfo[39m]: Redis connected
2025-09-14 09:09:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:09:57 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:10:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:10:05 [[32minfo[39m]: Redis connected
2025-09-14 09:10:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:10:05 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:10:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:10:46 [[32minfo[39m]: Redis connected
2025-09-14 09:10:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:10:54 [[32minfo[39m]: Redis connected
2025-09-14 09:10:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:10:54 [[32minfo[39m]: Server is running on port 5000
2025-09-14 09:12:28 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 09:12:28 [[32minfo[39m]: Redis connected
2025-09-14 09:12:28 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 09:12:28 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:51:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:51:40 [[32minfo[39m]: Redis connected
2025-09-14 18:51:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:51:40 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:55:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:55:30 [[32minfo[39m]: Redis connected
2025-09-14 18:55:30 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:55:30 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:55:34 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:55:34 [[32minfo[39m]: Redis connected
2025-09-14 18:55:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:55:34 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:55:53 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:55:53 [[32minfo[39m]: Redis connected
2025-09-14 18:55:53 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:55:53 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:55:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:55:57 [[32minfo[39m]: Redis connected
2025-09-14 18:55:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:55:57 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:12 [[32minfo[39m]: Redis connected
2025-09-14 18:56:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:12 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:24 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:24 [[32minfo[39m]: Redis connected
2025-09-14 18:56:24 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:24 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:29 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:29 [[32minfo[39m]: Redis connected
2025-09-14 18:56:29 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:29 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:38 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:38 [[32minfo[39m]: Redis connected
2025-09-14 18:56:38 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:38 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:40 [[32minfo[39m]: Redis connected
2025-09-14 18:56:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:40 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:44 [[32minfo[39m]: Redis connected
2025-09-14 18:56:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:44 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:51 [[32minfo[39m]: Redis connected
2025-09-14 18:56:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:51 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:55 [[32minfo[39m]: Redis connected
2025-09-14 18:56:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:55 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:56:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:56:58 [[32minfo[39m]: Redis connected
2025-09-14 18:56:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:56:58 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:58:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:58:32 [[32minfo[39m]: Redis connected
2025-09-14 18:58:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:58:32 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:58:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:58:37 [[32minfo[39m]: Redis connected
2025-09-14 18:58:37 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:58:37 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:06 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:06 [[32minfo[39m]: Redis connected
2025-09-14 18:59:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:06 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:19 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:19 [[32minfo[39m]: Redis connected
2025-09-14 18:59:19 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:19 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:24 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:24 [[32minfo[39m]: Redis connected
2025-09-14 18:59:24 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:24 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:27 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:27 [[32minfo[39m]: Redis connected
2025-09-14 18:59:27 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:27 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:43 [[32minfo[39m]: Redis connected
2025-09-14 18:59:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:43 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:52 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:52 [[32minfo[39m]: Redis connected
2025-09-14 18:59:52 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:52 [[32minfo[39m]: Server is running on port 5000
2025-09-14 18:59:55 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 18:59:55 [[32minfo[39m]: Redis connected
2025-09-14 18:59:55 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 18:59:55 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:00:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:00:02 [[32minfo[39m]: Redis connected
2025-09-14 19:00:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:00:02 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:03 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:04 [[32minfo[39m]: Redis connected
2025-09-14 19:01:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:04 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:08 [[32minfo[39m]: Redis connected
2025-09-14 19:01:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:08 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:16 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:16 [[32minfo[39m]: Redis connected
2025-09-14 19:01:16 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:16 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:23 [[32minfo[39m]: Redis connected
2025-09-14 19:01:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:23 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:43 [[32minfo[39m]: Redis connected
2025-09-14 19:01:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:43 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:01:46 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:01:46 [[32minfo[39m]: Redis connected
2025-09-14 19:01:46 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:01:46 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:02:25 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:02:25 [[32minfo[39m]: Redis connected
2025-09-14 19:02:25 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:02:25 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:02:36 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:02:36 [[32minfo[39m]: Redis connected
2025-09-14 19:02:36 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:02:36 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:02:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:02:40 [[32minfo[39m]: Redis connected
2025-09-14 19:02:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:02:40 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:02:43 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:02:43 [[32minfo[39m]: Redis connected
2025-09-14 19:02:43 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:02:43 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:02:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:02:49 [[32minfo[39m]: Redis connected
2025-09-14 19:02:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:02:49 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:03:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:03:30 [[32minfo[39m]: Redis connected
2025-09-14 19:03:30 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:03:30 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:03:35 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:03:35 [[32minfo[39m]: Redis connected
2025-09-14 19:03:35 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:03:35 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:03:51 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:03:51 [[32minfo[39m]: Redis connected
2025-09-14 19:03:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:03:51 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:03:56 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:03:56 [[32minfo[39m]: Redis connected
2025-09-14 19:03:56 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:03:56 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:04:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:04:04 [[32minfo[39m]: Redis connected
2025-09-14 19:04:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:04:04 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:04:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:04:08 [[32minfo[39m]: Redis connected
2025-09-14 19:04:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:04:08 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:04:30 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-14 19:04:30 [[32minfo[39m]: Redis connected
2025-09-14 19:04:30 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-14 19:04:30 [[32minfo[39m]: Server is running on port 5000
2025-09-14 19:06:23 [[31merror[39m]: Error: Socket closed unexpectedly
    at Socket.<anonymous> (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@redis\client\lib\client\socket.ts:272:29)
    at Object.onceWrapper (node:events:633:26)
    at Socket.emit (node:events:518:28)
    at TCP.<anonymous> (node:net:351:12)
2025-09-14 19:06:23 [[32minfo[39m]: Redis reconnecting
2025-09-14 19:06:23 [[32minfo[39m]: Redis connected
2025-09-14 19:06:23 [[31merror[39m]: Error: Socket closed unexpectedly
    at Socket.<anonymous> (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@redis\client\lib\client\socket.ts:272:29)
    at Object.onceWrapper (node:events:633:26)
    at Socket.emit (node:events:518:28)
    at TCP.<anonymous> (node:net:351:12)
2025-09-15 10:48:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 10:48:05 [[32minfo[39m]: Redis connected
2025-09-15 10:48:05 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 10:48:05 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:25:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:25:49 [[32minfo[39m]: Redis connected
2025-09-15 12:25:49 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:25:49 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:26:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:26:50 [[32minfo[39m]: Redis connected
2025-09-15 12:26:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:26:50 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:26:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:26:58 [[32minfo[39m]: Redis connected
2025-09-15 12:26:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:26:58 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:27:04 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:27:04 [[32minfo[39m]: Redis connected
2025-09-15 12:27:04 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:27:04 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:27:22 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:27:22 [[32minfo[39m]: Redis connected
2025-09-15 12:27:22 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:27:22 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:27:32 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:27:32 [[32minfo[39m]: Redis connected
2025-09-15 12:27:32 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:27:32 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:28:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:28:08 [[32minfo[39m]: Redis connected
2025-09-15 12:28:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:28:08 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:28:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:28:44 [[32minfo[39m]: Redis connected
2025-09-15 12:28:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:28:44 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:28:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:28:50 [[32minfo[39m]: Redis connected
2025-09-15 12:28:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:28:50 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:28:54 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:28:54 [[32minfo[39m]: Redis connected
2025-09-15 12:28:54 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:28:54 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:29:00 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:29:00 [[32minfo[39m]: Redis connected
2025-09-15 12:29:00 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:29:00 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:29:09 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:29:09 [[32minfo[39m]: Redis connected
2025-09-15 12:29:09 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:29:09 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:39:02 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:39:02 [[32minfo[39m]: Redis connected
2025-09-15 12:39:02 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:39:02 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:39:17 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:39:17 [[32minfo[39m]: Redis connected
2025-09-15 12:39:17 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:39:17 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:39:25 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:39:25 [[32minfo[39m]: Redis connected
2025-09-15 12:39:25 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:39:25 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:39:34 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:39:34 [[32minfo[39m]: Redis connected
2025-09-15 12:39:34 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:39:34 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:40:31 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:40:31 [[32minfo[39m]: Redis connected
2025-09-15 12:40:31 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:40:31 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:40:35 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:40:35 [[32minfo[39m]: Redis connected
2025-09-15 12:40:35 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:40:35 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:40:39 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:40:40 [[32minfo[39m]: Redis connected
2025-09-15 12:40:40 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:40:40 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:41:48 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:41:48 [[32minfo[39m]: Redis connected
2025-09-15 12:41:48 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:41:48 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:41:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:41:57 [[32minfo[39m]: Redis connected
2025-09-15 12:41:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:41:57 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:42:01 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:42:01 [[32minfo[39m]: Redis connected
2025-09-15 12:42:01 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:42:01 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:50:45 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:50:45 [[32minfo[39m]: Redis connected
2025-09-15 12:50:45 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:50:45 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:53:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:53:57 [[32minfo[39m]: Redis connected
2025-09-15 12:53:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:53:57 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:54:20 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:54:20 [[32minfo[39m]: Redis connected
2025-09-15 12:54:20 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:54:20 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:54:42 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:54:42 [[32minfo[39m]: Redis connected
2025-09-15 12:54:42 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:54:42 [[32minfo[39m]: Server is running on port 5000
2025-09-15 12:54:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 12:54:50 [[32minfo[39m]: Redis connected
2025-09-15 12:54:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 12:54:50 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:05:49 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:05:49 [[32minfo[39m]: Redis connected
2025-09-15 13:05:49 [[32minfo[39m]: Bloom filter created: users_bloom
2025-09-15 13:05:49 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:07:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:07:50 [[32minfo[39m]: Redis connected
2025-09-15 13:07:50 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:07:50 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:07:58 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:07:58 [[32minfo[39m]: Redis connected
2025-09-15 13:07:58 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:07:58 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:08:05 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:08:06 [[32minfo[39m]: Redis connected
2025-09-15 13:08:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:08:06 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:08:23 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:08:23 [[32minfo[39m]: Redis connected
2025-09-15 13:08:23 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:08:23 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:08:50 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:08:50 [[32minfo[39m]: Redis connected
2025-09-15 13:08:51 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:08:51 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:08:57 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:08:57 [[32minfo[39m]: Redis connected
2025-09-15 13:08:57 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:08:57 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:15:00 [[31merror[39m]: Error: Doctor profile already exists
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:18:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-15 13:15:17 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-15 13:15:17 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at processParams (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:582:12)
2025-09-15 13:16:18 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:16:18 [[32minfo[39m]: Redis connected
2025-09-15 13:16:18 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:16:18 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:20:14 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:20:14 [[32minfo[39m]: Redis connected
2025-09-15 13:20:14 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:20:14 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:20:35 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:20:35 [[32minfo[39m]: Redis connected
2025-09-15 13:20:35 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:20:35 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:20:40 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:20:40 [[32minfo[39m]: Redis connected
2025-09-15 13:20:41 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:20:41 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:20:44 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:20:44 [[32minfo[39m]: Redis connected
2025-09-15 13:20:44 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:20:44 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:21:06 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:21:06 [[32minfo[39m]: Redis connected
2025-09-15 13:21:06 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:21:06 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:21:08 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:21:08 [[32minfo[39m]: Redis connected
2025-09-15 13:21:08 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:21:08 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:21:11 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:21:11 [[32minfo[39m]: Redis connected
2025-09-15 13:21:11 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:21:11 [[32minfo[39m]: Server is running on port 5000
2025-09-15 13:22:12 [[32minfo[39m]: âœ… Database connected successfully!
2025-09-15 13:22:12 [[32minfo[39m]: Redis connected
2025-09-15 13:22:12 [[32minfo[39m]: Bloom filter already exists: users_bloom
2025-09-15 13:22:12 [[32minfo[39m]: Server is running on port 5000
