2025-09-12 09:17:20 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:17:20 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at param (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:600:14)
2025-09-12 09:20:23 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:22:33
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:20:43 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:22:33
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:21:02 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 09:21:02 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at param (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:600:14)
2025-09-12 18:54:05 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-12 18:54:05 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at processParams (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:582:12)
2025-09-12 19:11:54 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:11:58 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:13:23 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "dateOfBirth"
    ],
    "message": "Date of birth is required in dd/mm/yyyy format"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-12 19:16:15 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:43 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:48 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:20:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:21:15 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:21:59 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: IPatientProfile) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:22:38 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:22:40 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:11 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:12 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:36:18
2025-09-12 19:23:42 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:23:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:23:59 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:24:17 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:25:20 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:37:18
2025-09-12 19:26:02 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.patientProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:46

  107 const updatePatientProfile = async (userId: string, data: Partial<IPatientProfile>) => {
  108   const redisClient = await initializeRedisClient();
  109 
→ 110   const result = await prisma.patientProfile.update({
          where: {
            userId: undefined,
        ?   id?: String,
        ?   AND?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   OR?: PatientProfileWhereInput[],
        ?   NOT?: PatientProfileWhereInput | PatientProfileWhereInput[],
        ?   dateOfBirth?: StringFilter | String,
        ?   status?: EnumProfileStatusFilter | ProfileStatus,
        ?   user?: UserScalarRelationFilter | UserWhereInput,
        ?   medicalRecords?: MedicalRecordListRelationFilter,
        ?   appointments?: AppointmentListRelationFilter,
        ?   reviews?: ReviewListRelationFilter
          },
          data: {
            status: "INACTIVE"
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
                phone: true,
                role: true,
                gender: true
              }
            }
          }
        })

Argument `where` of type PatientProfileWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updatePatientProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\patient.profile.ts:110:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user-profiles\user.profile.controller.ts:38:18
2025-09-13 11:31:03 [[31merror[39m]: Error: password not matched
    at Object.login (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\auth\auth.services.ts:24:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\auth\auth.controller.ts:10:18
2025-09-13 11:37:36 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.create()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:19:45

  16 }
  17 
  18 
→ 19 const result = await prisma.doctorProfile.create({
       data: {
         specialty: "SURGERY",
         licenseNumber: "S10567",
     +   status: ProfileStatus
       }
     })

Argument `status` is missing.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:19:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-13 11:49:04 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.findUnique()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:32:45

  29 };
  30 
  31 const getDoctorProfile = async (userId: string) => {
→ 32   const result = await prisma.doctorProfile.findUnique({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         include: {
           user: {
             select: {
               id: true,
               email: true,
               name: true,
               phone: true,
               role: true,
               status: true,
               ~~~~~~
               dateOfBirth: true,
       ?       gender?: true,
       ?       password?: true,
       ?       isActive?: true,
       ?       isDeleted?: true,
       ?       createdAt?: true,
       ?       updatedAt?: true,
       ?       posts?: true,
       ?       patientProfile?: true,
       ?       doctorProfile?: true,
       ?       nurseProfile?: true,
       ?       _count?: true
             }
           },
           schedules: true,
           appointments: true,
           clinics: true
         }
       })

Unknown field `status` for select statement on model `User`. Available options are marked with ?.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.getDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:32:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:23:18
2025-09-13 12:00:54 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIV"
                   ~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:01:11 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:01:35 [[31merror[39m]: ZodError: [
  {
    "expected": "object",
    "code": "invalid_type",
    "path": [],
    "message": "Invalid input: expected object, received undefined"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:01:45 [[31merror[39m]: Error: Doctor profile already exists
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:17:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-13 12:01:58 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:03:36 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:05:49 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:09 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:10 [[31merror[39m]: PrismaClientValidationError: 
Invalid `prisma.doctorProfile.update()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:45

  52 };
  53 
  54 const updateDoctorProfile = async (userId: string, data: Partial<IDoctorProfile>) => {
→ 55   const result = await prisma.doctorProfile.update({
         where: {
           userId: "9kf3Q0yNh6SbTvhdS_DmY"
         },
         data: {
           status: "ACTIVEe"
                   ~~~~~~~~~
         }
       })

Invalid value for argument `status`. Expected ProfileStatus.
    at throwValidationException (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\core\errorRendering\throwValidationException.ts:45:9)
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:202:7)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.updateDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:55:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:36:18
2025-09-13 12:06:23 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:03 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:05 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:11 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-13 12:09:19 [[31merror[39m]: ZodError: [
  {
    "code": "invalid_value",
    "values": [
      "ACTIVE",
      "INACTIVE"
    ],
    "path": [
      "status"
    ],
    "message": "Invalid option: expected one of \"ACTIVE\"|\"INACTIVE\""
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-14 19:06:23 [[31merror[39m]: Error: Socket closed unexpectedly
    at Socket.<anonymous> (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@redis\client\lib\client\socket.ts:272:29)
    at Object.onceWrapper (node:events:633:26)
    at Socket.emit (node:events:518:28)
    at TCP.<anonymous> (node:net:351:12)
2025-09-14 19:06:23 [[31merror[39m]: Error: Socket closed unexpectedly
    at Socket.<anonymous> (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@redis\client\lib\client\socket.ts:272:29)
    at Object.onceWrapper (node:events:633:26)
    at Socket.emit (node:events:518:28)
    at TCP.<anonymous> (node:net:351:12)
2025-09-15 13:15:00 [[31merror[39m]: Error: Doctor profile already exists
    at Object.createDoctorProfile (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.profile.services.ts:18:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\doctor\doctor.controller.ts:11:18
2025-09-15 13:15:17 [[31merror[39m]: TokenExpiredError: jwt expired
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:190:21
    at getSecret (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:97:14)
    at Object.module.exports [as verify] (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\jsonwebtoken\verify.js:101:10)
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:8:25)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
2025-09-15 13:15:17 [[31merror[39m]: Error: Invalid or expired token
    at verifyToken (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\verifyToken.ts:12:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:21:32
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at processParams (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:582:12)
2025-09-15 16:00:45 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:45 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:45 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:45 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:46 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:47 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:48 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:51 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:53 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:55 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:57 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:00:59 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:01 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:03 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:06 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:08 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:10 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:12 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:14 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:16 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:18 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:20 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:23 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:25 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:27 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:29 [[31merror[39m]: AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)
2025-09-15 16:01:31 [[31merror[39m]: Error: Socket closed unexpectedly
    at Socket.<anonymous> (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@redis\client\lib\client\socket.ts:272:29)
    at Object.onceWrapper (node:events:633:26)
    at Socket.emit (node:events:518:28)
    at TCP.<anonymous> (node:net:351:12)
2025-09-15 20:59:32 [[31merror[39m]: Error: You are not authorized
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:18:13
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at Route.dispatch (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:117:3)
    at handle (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:435:11)
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:295:15
    at processParams (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:582:12)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\index.js:291:5)
2025-09-15 21:02:31 [[31merror[39m]: Error: Clinic already exists
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:03:05 [[31merror[39m]: Error: Clinic already exists redis
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:03:07 [[31merror[39m]: Error: Clinic already exists redis
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:03:08 [[31merror[39m]: Error: Clinic already exists redis
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:03:09 [[31merror[39m]: Error: Clinic already exists redis
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:03:53 [[31merror[39m]: Error: Clinic already exists redis
    at Object.createClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:17:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:8:18
2025-09-15 21:26:59 [[31merror[39m]: Error: Clinic not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:51:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:27:05 [[31merror[39m]: ZodError: [
  {
    "expected": "object",
    "code": "invalid_type",
    "path": [],
    "message": "Invalid input: expected object, received undefined"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-15 21:27:13 [[31merror[39m]: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "clinicId"
    ],
    "message": "Clinic id is required"
  },
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "doctorId"
    ],
    "message": "Doctor id is required"
  }
]
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\validateRequest.ts:7:18
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\utils\asyncHandler.ts:5:21
    at Layer.handleRequest (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\layer.js:152:17)
    at next (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\router\lib\route.js:157:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\middleware\isAuth.ts:50:5
2025-09-15 21:28:35 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:68:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:28:43 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:68:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:30:15 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:69:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:30:57 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:31:33 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:31:35 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:32:08 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:32:51 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:32:52 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:32:53 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:32:55 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:70:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:25 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:62:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:26 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:62:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:27 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:62:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:28 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:62:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:39 [[31merror[39m]: PrismaClientKnownRequestError: 
Invalid `prisma.clinicDoctor.create()` invocation in
C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:82:44

  79   throw new AppError("Clinic doctor already exists", status.CONFLICT);
  80 }
  81 
→ 82 const result = await prisma.clinicDoctor.create(
Foreign key constraint violated on the constraint: `ClinicDoctor_doctorId_fkey`
    at ei.handleRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:228:13)
    at ei.handleAndLogRequestError (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:174:12)
    at ei.request (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\RequestHandler.ts:143:12)
    at a (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\node_modules\@prisma\client\src\runtime\getPrismaClient.ts:833:24)
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:82:18)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:46 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:33:47 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:35:20 [[31merror[39m]: Error: Clinic not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:62:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:36:37 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:36:40 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:36:45 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:37:26 [[31merror[39m]: Error: User already exists
    at Object.createUser (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user.service.ts:24:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user.controller.ts:8:18
2025-09-15 21:37:30 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:68:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:37:32 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:68:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:38:54 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:68:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:39:54 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:43:14 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:43:16 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:43:20 [[31merror[39m]: Error: Doctor not found
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:71:11)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-15 21:45:13 [[31merror[39m]: Error: Doctor already assigned to this clinic (redis)
    at Object.assignDoctorToClinic (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.service.ts:52:11)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\clinic\clinic.controller.ts:17:18
2025-09-16 17:39:10 [[31merror[39m]: Error: User already exists
    at Object.createUser (C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user.service.ts:24:13)
    at C:\Users\masuma\Desktop\APP\Projects\unfinished projects\sql_learning\prisma_tutorial\src\modules\user\user.controller.ts:8:18
