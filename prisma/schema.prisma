datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  PATIENT
  DOCTOR
  NURSE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Specialty {
  CARDIOLOGY
  DERMATOLOGY
  ENDOCRINOLOGY
  GASTROENTEROLOGY
  GENERAL_PRACTICE
  HEMATOLOGY
  INTERNAL_MEDICINE
  NEUROLOGY
  OBSTETRICS_GYNECOLOGY
  ORTHOPEDICS
  PEDIATRICS
  PSYCHIATRY
  RADIOLOGY
  SURGERY
}

enum ProfileStatus {
  ACTIVE
  INACTIVE
}

enum AppointmentStatus {
  BOOKED
  CANCELLED
  COMPLETED
  PENDING
}

enum ScheduleType {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  phone    String
  role     Role   @default(USER)
  gender   Gender
  password String
  posts    Post[]

  patientProfile PatientProfile?
  doctorProfile  DoctorProfile?
  nurseProfile   NurseProfile?

  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientProfile {
  id             String          @id @default(uuid())
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords MedicalRecord[]
  appointments   Appointment[]   @relation("AppointmentPatient")
  reviews        Review[]        @relation("ReviewPatient")
  dateOfBirth    String
  status         ProfileStatus   @default(ACTIVE)
}

model DoctorProfile {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty     Specialty
  licenseNumber String         @unique
  schedules     Schedule[]
  appointments  Appointment[]  @relation("AppointmentDoctor")
  status        ProfileStatus  @default(ACTIVE)
  clinics       ClinicDoctor[] @relation("ClinicDoctor")
}

model NurseProfile {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber String        @unique
  status        ProfileStatus @default(ACTIVE)
  clinics       ClinicNurse[] @relation("ClinicNurse")
}

model Schedule {
  id           String        @id @default(uuid())
  doctorId     String
  doctor       DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  date         DateTime      @default(now())
  startTime    DateTime
  endTime      DateTime
  maxPatients  Int           @default(0)
  slotDuration Int           @default(30)
  isAvailable  Boolean       @default(true)
  appointments Appointment[]
  clinicId     String
  clinic       Clinic        @relation("ClinicSchedules", fields: [clinicId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek[]   @default([])
  timezone     String?       @default("Asia/Dhaka")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Post {
  id        String  @id @default(uuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id     String            @id @default(uuid())
  date   DateTime
  status AppointmentStatus @default(PENDING)
  notes  String?

  patientId String
  patient   PatientProfile @relation("AppointmentPatient", fields: [patientId], references: [id], onDelete: Cascade)

  doctorId String
  doctor   DoctorProfile @relation("AppointmentDoctor", fields: [doctorId], references: [id], onDelete: Cascade)

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  clinicId String?
  clinic   Clinic? @relation("ClinicAppointment", fields: [clinicId], references: [id], onDelete: SetNull)

  medicalRecords MedicalRecord[]

  scheduleType ScheduleType @default(AVAILABLE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model MedicalRecord {
  id            String         @id @default(uuid())
  patientId     String
  patient       PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointmentId String?
  appointment   Appointment?   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  diagnosis     String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Review {
  id        String         @id @default(uuid())
  patientId String
  patient   PatientProfile @relation("ReviewPatient", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String
  rating    Int
  comment   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Clinic {
  id           String         @id @default(uuid())
  name         String
  address      String?
  doctors      ClinicDoctor[] @relation("ClinicDoctor")
  appointments Appointment[]  @relation("ClinicAppointment")
  nurses       ClinicNurse[]  @relation("ClinicNurse")
  schedules    Schedule[]     @relation("ClinicSchedules")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([name, address])
}

model ClinicDoctor {
  id       String        @id @default(uuid())
  clinicId String
  doctorId String
  clinic   Clinic        @relation("ClinicDoctor", fields: [clinicId], references: [id], onDelete: Cascade)
  doctor   DoctorProfile @relation("ClinicDoctor", fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([clinicId, doctorId])
}

model ClinicNurse {
  id       String       @id @default(uuid())
  clinicId String
  nurseId  String
  clinic   Clinic       @relation("ClinicNurse", fields: [clinicId], references: [id], onDelete: Cascade)
  nurse    NurseProfile @relation("ClinicNurse", fields: [nurseId], references: [id], onDelete: Cascade)

  @@unique([clinicId, nurseId])
}
